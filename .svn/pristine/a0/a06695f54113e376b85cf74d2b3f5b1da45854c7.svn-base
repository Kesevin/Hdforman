package com.dgg.hdforeman.app.utils;import android.text.TextUtils;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;/** * Created by Rex on 2016/9/28 */public class TimeUtil {    public static final String WHOLE_TIME = "yyyy-MM-dd HH:mm:ss";    public static final String YEAR_MONTH_DAY_HOUR_MINS = "yyyy-MM-dd HH:mm";    public static final String YEAR_MONTH_DAY = "yyyy-MM-dd";    public static final String YEAR_MONTH = "yyyy-MM";    public static final String MONTH_DAY = "MM月dd号";    public static final String HOUR_MINS = "HH:mm";    public static final String TIME_WEEK = "yyyy-MM-dd EEEE";    public static final SimpleDateFormat DEFAULT_FORMAT = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");    public static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd");    /**     * 描述：时间转换     *     * @param currentTime 当前的时间     * @param pushTime    发布的时间     * @return 要显示的时间值     */    public static String convertTime(long currentTime, long pushTime) {        // 计算当前时间和发布时间之间的间隔        long time = currentTime - pushTime;        // 秒        long second = time / 1000;        // 分        long minute = second / 60;        if (minute < 60) {            minute = minute == 0 ? 1 : minute;            return minute + "分钟前";        } else {            // 小时            long hour = minute / 60;            if (hour < 24) {                if (hour == 0)                    hour = 1;                return hour + "小时前";            }            // 天            long day = hour / 24;            if (day <= 7) {                if (day == 0)                    day = 1;                return day + "天前";            }            // 年            long year = day / 365;            if (year >= 1) {                // 大于一年                SimpleDateFormat sDateFormat = new SimpleDateFormat("yyyy年MM月dd日");                return sDateFormat.format(new Date(pushTime));            }            SimpleDateFormat sDateFormat = new SimpleDateFormat("MM月dd日");            return sDateFormat.format(new Date(pushTime));        }    }    /**     * 描述：获取当前时间     *     * @return     */    public static String getCurrentTime() {        long time = System.currentTimeMillis();        Date d1 = new Date(time);        return DEFAULT_FORMAT.format(d1);    }    /**     * 描述：获取当前中文时间     *     * @return     */    public static String getCurrentTimeChiness() {        long time = System.currentTimeMillis();        SimpleDateFormat format = new SimpleDateFormat("yyyy年MM月dd日 HH:mm:ss");        Date d1 = new Date(time);        return format.format(d1);    }    /**     * 描述：根据规定格式获取当前时间     *     * @return     */    public static String getSpecifiedTime(String specifiedformat) {        SimpleDateFormat simformat = new SimpleDateFormat(specifiedformat);        Date d1 = new Date(System.currentTimeMillis());        return simformat.format(d1);    }    /**     * 描述：根据规定格式获取指定时间     *     * @return     */    public static String getTimeByFormat(String millis, String format) {        SimpleDateFormat simformat = new SimpleDateFormat(format);        Date d1 = new Date(Long.parseLong(millis));        String t = simformat.format(d1);        return t;    }    /**     * 描述：保留年月日     *     * @return     */    public static String keepTimeYMD(String time,String formatStr) {        String result = "";        if(TextUtils.isEmpty(time)) return result;        try {            SimpleDateFormat simformat = new SimpleDateFormat(WHOLE_TIME);            simformat.parse(time);            result = new SimpleDateFormat(formatStr).format(simformat.parse(time));        } catch (ParseException e) {            e.printStackTrace();        }        return result;    }    /**     * 描述：计算时间差     *     * @return     */    public static long getTimeDifference(String fDate) {        long diff = 0;        try {            Date d1 = DEFAULT_FORMAT.parse(fDate);            diff = System.currentTimeMillis() - d1.getTime();        } catch (ParseException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return diff;    }    /**     * 描述：计算时间是否大于当前时间     *     * @return     */    public static boolean isTimeAfter(String fDate) {        long diff = 0;        try {            Date d1 = DEFAULT_FORMAT.parse(fDate);            diff = d1.getTime() - System.currentTimeMillis();        } catch (ParseException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return diff > 0 ? true : false;    }    /**     * 描述：计算天数     *     * @return     */    public static int daysBetween(String smdate, String bdate) {        long between_days = 0;        try {            SimpleDateFormat sdf = new SimpleDateFormat(YEAR_MONTH_DAY);            Calendar cal = Calendar.getInstance();            cal.setTime(sdf.parse(smdate));            long time1 = cal.getTimeInMillis();            cal.setTime(sdf.parse(bdate));            long time2 = cal.getTimeInMillis();            between_days = (time2 - time1) / (1000 * 3600 * 24);        } catch (ParseException e) {            e.printStackTrace();        }        return Integer.parseInt(String.valueOf(between_days));    }    /**     * 描述：计算倒计时剩余天数     *     * @param smdate 截止日期 （去除了时分秒，只算天数）     * @return     */    public static long remainDays(String smdate) {        long day = 0;        try {            long time = DATE_FORMAT.parse(smdate).getTime();            long now = System.currentTimeMillis();            Date date = new Date(now);            String n = DATE_FORMAT.format(date);            now = DATE_FORMAT.parse(n).getTime();            if ((time - now) == 0) {                day = 1;            } else if ((time - now) < 0) {                day = 0;            } else {                day = (time - now) / (1000 * 60 * 60 * 24) + 1;            }        } catch (ParseException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return day;    }    /**     * 描述：计算当前时间是星期几     *     * @param     * @return     */    public static String getDayOfWeek() {        Calendar c = Calendar.getInstance();        String mWay = String.valueOf(c.get(Calendar.DAY_OF_WEEK));        if ("1".equals(mWay)) {            mWay = "日";        } else if ("2".equals(mWay)) {            mWay = "一";        } else if ("3".equals(mWay)) {            mWay = "二";        } else if ("4".equals(mWay)) {            mWay = "三";        } else if ("5".equals(mWay)) {            mWay = "四";        } else if ("6".equals(mWay)) {            mWay = "五";        } else if ("7".equals(mWay)) {            mWay = "六";        }        return "星期" + mWay;    }    /**     * 描述：将年月日转化为默认日期格式字符串     *     * @param year     * @param month     * @param day     * @return     */    public static String getFormatDate(int year, int month, int day) {        String formatYear = year + "";        String formatMonth = "";        String formatDay = "";        if (month < 10) {            formatMonth = "0" + month;        } else {            formatMonth = month + "";        }        if (day < 10) {            formatDay = "0" + day;        } else {            formatDay = day + "";        }        return formatYear + "-" + formatMonth + "-" + formatDay;    }    /**     * 描述：计算某年中某月有多少天     *     * @param year     * @param month     * @return     */    public static int getDaysOfMonth(int year, int month) {        switch (month) {            case 1:            case 3:            case 5:            case 7:            case 8:            case 10:            case 12:                return 31;            case 4:            case 6:            case 9:            case 11:                return 30;            default:                if (isLeapYear(year)) {                    return 29;                }                return 28;        }    }    /**     * 描述：判断某年是不是闰年     *     * @param year     * @return     */    public static boolean isLeapYear(int year) {        if (year % 400 == 0 || year % 100 != 0 && year % 4 == 0) {            return true;        }        return false;    }    public static String getTimeAndWeek(String millisecond) {        SimpleDateFormat simformat = new SimpleDateFormat("yyyy-MM-dd EEEE");        Date d1 = new Date(Long.parseLong(millisecond));        String t = simformat.format(d1);        return t;    }    public static long getTime2Millisecond(String dateTime) {        try {            return new SimpleDateFormat(WHOLE_TIME).parse(dateTime).getTime();        } catch (ParseException e) {            e.printStackTrace();        }        return System.currentTimeMillis();    }    public static String[] splitTime(String millisecond) {        String a[] = new String[2];        a[0] = new SimpleDateFormat(YEAR_MONTH_DAY).format(new Date(Long.parseLong(millisecond)));        a[1] = new SimpleDateFormat(HOUR_MINS).format(new Date(Long.parseLong(millisecond)));        return a;    }    public static String getMonthDay(String dateTime) {        return new SimpleDateFormat(MONTH_DAY).format(new Date(getTime2Millisecond(dateTime)));    }    /**     * 描述：计算天数大小     *     * @return     */    public static int compareDate(String smDate, String bDate) {        try {            Date d1 = DATE_FORMAT.parse(smDate);            Date d2 = DATE_FORMAT.parse(bDate);            if (d1.getTime() < d2.getTime()) {                return 1;            } else if (d1.getTime() > d2.getTime()) {                return -1;            } else {// 相等                return 0;            }        } catch (ParseException e) {            e.printStackTrace();        }        return 4;    }    // 比较时间    public static int compareDate(Date d1, Date d2) {        if (d1.getTime() < d2.getTime()) {            return 1;        } else if (d1.getTime() > d2.getTime()) {            return -1;        } else {// 相等            return 0;        }    }    // 字符串转为date    public static Date String2Date(String str) {        SimpleDateFormat sim = new SimpleDateFormat("yyyy-MM-dd");        try {            Date date = sim.parse(str);            return date;        } catch (ParseException e) {            e.printStackTrace();            return null;        }    }}