package com.dgg.hdforeman.mvp.presenter.project;

import android.app.Application;
import android.content.Intent;

import com.dgg.hdforeman.app.utils.RxUtils;
import com.dgg.hdforeman.mvp.contract.project.MaterialBagContract;
import com.dgg.hdforeman.mvp.model.been.BaseData;
import com.dgg.hdforeman.mvp.model.been.BaseJson;
import com.dgg.hdforeman.mvp.model.been.MaterialBean;
import com.dgg.hdforeman.mvp.model.been.MaterialInfo;
import com.dgg.hdforeman.mvp.model.been.ProjectInfoResponse;
import com.dgg.hdforeman.mvp.model.been.ProjectResponse;
import com.dgg.hdforeman.mvp.ui.project.adapter.ConstructMaterialAdapter;
import com.dgg.hdforeman.mvp.ui.project.adapter.ConstructProgressAdapter;
import com.jess.arms.di.scope.ActivityScope;
import com.jess.arms.mvp.BasePresenter;
import com.jess.arms.widget.imageloader.ImageLoader;
import com.tbruyelle.rxpermissions.RxPermissions;

/**
 * 通过Template生成对应页面的MVP和Dagger代码,请注意输入框中输入的名字必须相同
 * 由于每个项目包结构都不一定相同,所以每生成一个文件需要自己导入import包名,可以在设置中设置自动导入包名
 * 请在对应包下按以下顺序生成对应代码,Contract->Model->Presenter->Activity->Module->Component
 * 因为生成Activity时,Module和Component还没生成,但是Activity中有它们的引用,所以会报错,但是不用理会
 * 继续将Module和Component生成完后,编译一下项目再回到Activity,按提示修改一个方法名即可
 * 如果想生成Fragment的相关文件,则将上面构建顺序中的Activity换为Fragment,并将Component中inject方法的参数改为此Fragment
 */

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import me.jessyan.rxerrorhandler.core.RxErrorHandler;
import me.jessyan.rxerrorhandler.handler.ErrorHandleSubscriber;
import rx.android.schedulers.AndroidSchedulers;
import rx.functions.Action0;

import static com.dgg.hdforeman.mvp.ui.project.fragment.DuringConstructFragment.ITEM_DATA;

/**
 * Created by Rex on 2016/11/18.
 */

@ActivityScope
public class MaterialBagPresenter extends BasePresenter<MaterialBagContract.Model, MaterialBagContract.View> {
    private RxErrorHandler mErrorHandler;
    private Application mApplication;
    private RxPermissions mRxPermissions;
    private ImageLoader mImageLoader;
    List<MaterialInfo> infos = new ArrayList<MaterialInfo>();;
    private ConstructMaterialAdapter mAdapter;
   private int pageStart=0 ;
    private int pageSize =10;
    private int order;
    @Inject
    public MaterialBagPresenter(MaterialBagContract.Model model, MaterialBagContract.View rootView
            , RxErrorHandler handler, Application application, RxPermissions rxPermissions
            , ImageLoader imageLoader) {
        super(model, rootView);
        this.mErrorHandler = handler;
        this.mApplication = application;
        this.mRxPermissions = rxPermissions;
        this.mImageLoader = imageLoader;
    }


    public void initAdapter(){
        mAdapter = new ConstructMaterialAdapter(infos);
        mRootView.setAdapter(mAdapter);
        mAdapter.setRootView(mRootView);

    }

    public void getMaterial(String pf_proid , int order , int type, final boolean refresh ){
            if (refresh) {
                pageStart = 0;
            }
        mModel.getMaterialsBag(pf_proid,order,type,pageStart,pageSize)
                .compose(RxUtils.<BaseData<MaterialBean>>applySchedulers(mRootView))
                .observeOn(AndroidSchedulers.mainThread())
                .doOnSubscribe(new Action0() {
                    @Override
                    public void call() {
                        if (refresh)
                            mRootView.showLoading();//显示上拉刷新的进度条
                        else
                            mRootView.startLoadMore();
                    }
                })
                .doAfterTerminate(new Action0() {
                    @Override
                    public void call() {
                        if (refresh)
                            mRootView.stopRefresh();
                        else
                            mRootView.stopLoadeMore();
                    }
                })
                .subscribe(new ErrorHandleSubscriber<BaseData<MaterialBean>>(mErrorHandler) {
                    @Override
                    public void onNext(BaseData<MaterialBean> mData) {
                        if (mData.isSuccess()) {
                            List<MaterialInfo> tmp = mData.getD().getList();
                            if (refresh){
                                infos.clear();
                                if(tmp.size()==0){
                              mRootView.showNoData();
                                    mRootView.setIsLoad(true);
                                }else if(tmp.size()< pageSize){
                                    mRootView.hideNodata();
                                    mRootView.setIsLoad(true);
                                }else{
                                    mRootView.hideNodata();
                                    mRootView.setIsLoad(false);
                                }
                            }else
                            {
                                if (tmp.size() < pageSize) {
                                    mRootView.setIsLoad(true);
                                }else{
                                    mRootView.setIsLoad(false);
                                }
                            }
                            pageStart+=pageSize;
                            infos.addAll(  mData.getD().getList());
                            mAdapter.notifyDataSetChanged();

                        } else {
                            mRootView.showMessage(mData.getMsg());
                        }
                    }
                });
    }
}