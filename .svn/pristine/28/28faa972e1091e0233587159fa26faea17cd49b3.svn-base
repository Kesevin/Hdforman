package com.dgg.hdforeman.mvp.ui.project.activity;

import android.content.Intent;
import android.support.annotation.NonNull;
import android.support.v4.widget.NestedScrollView;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RadioGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.bigkoo.pickerview.TimePickerView;
import com.dgg.hdforeman.R;
import com.dgg.hdforeman.app.utils.TimeUtil;
import com.dgg.hdforeman.di.commponent.AppComponent;
import com.dgg.hdforeman.di.commponent.DaggerQuoteListComponent;
import com.dgg.hdforeman.di.module.QuoteListModule;
import com.dgg.hdforeman.mvp.contract.project.QuoteListContract;
import com.dgg.hdforeman.mvp.presenter.project.QuoteListPresenter;
import com.dgg.hdforeman.mvp.ui.project.adapter.ChoiceAdapter;
import com.dgg.hdforeman.mvp.ui.widget.WaitingDialog;
import com.jess.arms.base.DefaultAdapter;
import com.jess.arms.utils.UiUtils;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import butterknife.BindView;
import butterknife.OnClick;

import static com.jess.arms.utils.Preconditions.checkNotNull;

/**
 * 通过Template生成对应页面的MVP和Dagger代码,请注意输入框中输入的名字必须相同
 * 由于每个项目包结构都不一定相同,所以每生成一个文件需要自己导入import包名,可以在设置中设置自动导入包名
 * 请在对应包下按以下顺序生成对应代码,Contract->Model->Presenter->Activity->Module->Component
 * 因为生成Activity时,Module和Component还没生成,但是Activity中有它们的引用,所以会报错,但是不用理会
 * 继续将Module和Component生成完后,编译一下项目再回到Activity,按提示修改一个方法名即可
 * 如果想生成Fragment的相关文件,则将上面构建顺序中的Activity换为Fragment,并将Component中inject方法的参数改为此Fragment
 */

/**
 * Created by jess on 29/11/2016 15:43
 * Contact with jess.yan.effort@gmail.com
 */

public class QuoteListActivity extends BacksActivity<QuoteListPresenter> implements QuoteListContract.View {
    public static final String PACKAGE_PRICE_EXPRESSION = "package_price_expression";
    public static final String PACKAGE_UPGRADE_INFO = "package_upgrade_info";
    public static final String PACKAGE_FREE_INFO = "package_free_info";
    public static final String PACKAGE_OTHER_UPGRADE = "package_other_upgrade";
    public static final String PACKAGE_PACKAGE_ID = "package_package_id";
    public static final String PACKAGE_PROJECT_ID = "package_project_id";
    public static final String title = "选择开工时间";
    @BindView(R.id.tv_quote_list_base)
    TextView mTvQuoteListBase;
    @BindView(R.id.tv_quote_list_total)
    TextView mTvQuoteListTotal;
    @BindView(R.id.tv_quote_list_total_num)
    TextView mTvQuoteListTotalNum;
    @BindView(R.id.tv_quote_list_expression)
    TextView mTvQuoteListExpression;
    @BindView(R.id.rl_quote_list)
    RelativeLayout mRlQuoteList;
    @BindView(R.id.tv_quote_list_upgrade_total)
    TextView mTvQuoteListUpgradeTotal;
    @BindView(R.id.tv_quote_list_upgrade_total_num)
    TextView mTvQuoteListUpgradeTotalNum;
    @BindView(R.id.tv_quote_list_work_date)
    TextView mTvQuoteListWorkDate;
    @BindView(R.id.rl_quote_)
    LinearLayout mRlQuote;
    @BindView(R.id.sv_project_detail)
    NestedScrollView mSvProjectDetail;
    @BindView(R.id.recyclerView)
    RecyclerView mRecyclerView;
    @BindView(R.id.rv_choice)
    RecyclerView rv_choice;
    @BindView(R.id.rg_canornot)
    RadioGroup radioGroup;
    @BindView(R.id.rl_time_picker)
    RelativeLayout rl_time_picker;
    @BindView(R.id.et_quote_list_remark)
    EditText mEtQuoteListRemark;
    private boolean isweeksuported;
    private String starttime;
    private String mStartdate;
    TimePickerView pvTime;
    private WaitingDialog waitingDialog;
    @Override
    protected void setupActivityComponent(AppComponent appComponent) {
        DaggerQuoteListComponent
                .builder()
                .appComponent(appComponent)
                .quoteListModule(new QuoteListModule(this)) //请将QuoteListModule()第一个首字母改为小写
                .build()
                .inject(this);
    }

    @Override
    protected View initView() {
        return LayoutInflater.from(this).inflate(R.layout.activity_quote_list, null, false);
    }

    @Override
    protected void initData() {
        initRecycleView();
        updateView();
        initListener();
        mPresenter.initRvChoice();
    }

    private void initListener() {

        rl_time_picker.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (pvTime==null) {
                    pvTime = new TimePickerView(QuoteListActivity.this, TimePickerView.Type.YEAR_MONTH_DAY);
                    //控制时间范围
                    Calendar calendar = Calendar.getInstance();
                    pvTime.setRange(calendar.get(Calendar.YEAR), calendar.get(Calendar.YEAR) + 100);//要在setTime 之前才有效果哦
                    if (starttime != null) {
                        TimeUtil.String2Date(starttime);
                    } else {
                        pvTime.setTime(new Date());
                    }
                    pvTime.setTitle(title);
                    pvTime.setCyclic(false);
                    pvTime.setCancelable(true);
                    //时间选择后回调
                    pvTime.setOnTimeSelectListener(new TimePickerView.OnTimeSelectListener() {

                        @Override
                        public void onTimeSelect(Date date) {
                            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                            Date tmpdate=new Date(System.currentTimeMillis()-24*60*60*1000);
                            if (date.before(tmpdate)){
                                UiUtils.makeText("请选择稍后点的时间，时间不能倒退哟～");
                                return;
                            }
                            Date afterdate=new Date(System.currentTimeMillis()+365*24*60*60*1000);
                            if (date.after(afterdate)){
                                UiUtils.makeText("亲～，暂时不能预约两年后的业务哟");
                                return;
                            }
                            starttime = format.format(date);
                            updatetime(starttime);

//                        mTransferDate.setAction(format.format(date));
                        }
                    });
                }

                pvTime.show();
            }
        });
        radioGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup group, int checkedId) {
                if (checkedId == R.id.rb_can) {
                    isweeksuported = true;
                } else {
                    isweeksuported = false;
                }
            }
        });
    }

    private void initRecycleView() {
        UiUtils.configRecycleView(mRecyclerView, new LinearLayoutManager(getApplicationContext()));
        UiUtils.configRecycleView(rv_choice, new LinearLayoutManager(getApplicationContext()));
    }

    /**
     * 更新view
     */
    private void updateView() {
        mPresenter.parseIntent(getIntent());
    }


    @Override
    public void showLoading() {
        if (waitingDialog==null){
            waitingDialog=new WaitingDialog(this);
        }
            waitingDialog.show();
    }

    @Override
    public void hideLoading() {
            if (waitingDialog!=null&&waitingDialog.isShowing()){
                waitingDialog.dismiss();
            }
    }

    @Override
    public void showMessage(@NonNull String message) {
        checkNotNull(message);
        UiUtils.SnackbarText(message);
    }

    @Override
    public void launchActivity(@NonNull Intent intent) {
        checkNotNull(intent);
        UiUtils.startActivity(this, intent);
    }

    @Override
    public void killMyself() {
        finish();
    }


    @Override
    public void setBaseExpression(String expression) {
        mTvQuoteListExpression.setText(expression);
    }

    @Override
    public void setBaseTotal(String total) {
        mTvQuoteListTotalNum.setText(total);
    }

    @Override
    public void setAdapter(DefaultAdapter adapter) {
        mRecyclerView.setAdapter(adapter);
    }

    @Override
    public void setUpgradeTotal(String total) {
        mTvQuoteListUpgradeTotalNum.setText(total);
    }

    @Override
    public void initRvChoice(ChoiceAdapter adapter) {
        rv_choice.setAdapter(adapter);
    }

    @Override
    public String getRemark() {
        return mEtQuoteListRemark.getText().toString().trim();
    }

    @Override
    public void settime(String time) {
        if (time==null) return;
        this.mStartdate = time;
        mTvQuoteListWorkDate.setText("预计开工时间： " + time.split(" ")[0]);
    }
    @Override
    public void setremark(String remark) {
        mEtQuoteListRemark.setText(remark);
    }


    private void updatetime(String time) {
        this.mStartdate = time;
        mTvQuoteListWorkDate.setText("预计开工时间： " + time.split(" ")[0]);
    }


    @OnClick({R.id.btn_quote_list_action})
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.btn_quote_list_action://提交预算单
                mPresenter.addBudgetSheet(mStartdate,isweeksuported);
                break;
        }
    }
    public static void startQuoteListActivity(){

    }
}
